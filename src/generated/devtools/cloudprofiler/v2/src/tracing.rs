// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
use crate::Result;

/// Implements a [ProfilerService](super::stub::ProfilerService) decorator for logging and tracing.
#[cfg(not(all(target_arch = "wasm32", target_os = "unknown")))]
#[derive(Clone, Debug)]
pub struct ProfilerService<T>
where T: super::stub::ProfilerService + std::fmt::Debug + Send + Sync {
    inner: T,
}
#[cfg(all(target_arch = "wasm32", target_os = "unknown"))]
#[derive(Clone, Debug)]
pub struct ProfilerService<T>
where T: super::stub::ProfilerService + std::fmt::Debug {
    inner: T,
}

#[cfg(not(all(target_arch = "wasm32", target_os = "unknown")))]
impl<T> ProfilerService<T>
where T: super::stub::ProfilerService + std::fmt::Debug + Send + Sync {
    pub fn new(inner: T) -> Self {
        Self { inner }
    }
}
#[cfg(all(target_arch = "wasm32", target_os = "unknown"))]
impl<T> ProfilerService<T>
where T: super::stub::ProfilerService + std::fmt::Debug {
    pub fn new(inner: T) -> Self {
        Self { inner }
    }
}

#[cfg(not(all(target_arch = "wasm32", target_os = "unknown")))]
impl<T> super::stub::ProfilerService for ProfilerService<T>
where T: super::stub::ProfilerService + std::fmt::Debug + Send + Sync {
    #[tracing::instrument(ret)]
    async fn create_profile(
        &self,
        req: crate::model::CreateProfileRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Profile>> {
        self.inner.create_profile(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn create_offline_profile(
        &self,
        req: crate::model::CreateOfflineProfileRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Profile>> {
        self.inner.create_offline_profile(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_profile(
        &self,
        req: crate::model::UpdateProfileRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Profile>> {
        self.inner.update_profile(req, options).await
    }

}
#[cfg(all(target_arch = "wasm32", target_os = "unknown"))]
impl<T> super::stub::ProfilerService for ProfilerService<T>
where T: super::stub::ProfilerService + std::fmt::Debug {
    #[tracing::instrument(ret)]
    async fn create_profile(
        &self,
        req: crate::model::CreateProfileRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Profile>> {
        self.inner.create_profile(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn create_offline_profile(
        &self,
        req: crate::model::CreateOfflineProfileRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Profile>> {
        self.inner.create_offline_profile(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_profile(
        &self,
        req: crate::model::UpdateProfileRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Profile>> {
        self.inner.update_profile(req, options).await
    }

}

/// Implements a [ExportService](super::stub::ExportService) decorator for logging and tracing.
#[cfg(not(all(target_arch = "wasm32", target_os = "unknown")))]
#[derive(Clone, Debug)]
pub struct ExportService<T>
where T: super::stub::ExportService + std::fmt::Debug + Send + Sync {
    inner: T,
}
#[cfg(all(target_arch = "wasm32", target_os = "unknown"))]
#[derive(Clone, Debug)]
pub struct ExportService<T>
where T: super::stub::ExportService + std::fmt::Debug {
    inner: T,
}

#[cfg(not(all(target_arch = "wasm32", target_os = "unknown")))]
impl<T> ExportService<T>
where T: super::stub::ExportService + std::fmt::Debug + Send + Sync {
    pub fn new(inner: T) -> Self {
        Self { inner }
    }
}
#[cfg(all(target_arch = "wasm32", target_os = "unknown"))]
impl<T> ExportService<T>
where T: super::stub::ExportService + std::fmt::Debug {
    pub fn new(inner: T) -> Self {
        Self { inner }
    }
}

#[cfg(not(all(target_arch = "wasm32", target_os = "unknown")))]
impl<T> super::stub::ExportService for ExportService<T>
where T: super::stub::ExportService + std::fmt::Debug + Send + Sync {
    #[tracing::instrument(ret)]
    async fn list_profiles(
        &self,
        req: crate::model::ListProfilesRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListProfilesResponse>> {
        self.inner.list_profiles(req, options).await
    }

}
#[cfg(all(target_arch = "wasm32", target_os = "unknown"))]
impl<T> super::stub::ExportService for ExportService<T>
where T: super::stub::ExportService + std::fmt::Debug {
    #[tracing::instrument(ret)]
    async fn list_profiles(
        &self,
        req: crate::model::ListProfilesRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListProfilesResponse>> {
        self.inner.list_profiles(req, options).await
    }

}

